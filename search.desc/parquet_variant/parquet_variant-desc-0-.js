searchState.loadedDescShard("parquet_variant", 0, "Implementation of Variant Binary Encoding from Apache …\nPrimitive (type_id=1): BINARY\nPrimitive (type_id=1): BOOLEAN (false)\nPrimitive (type_id=1): BOOLEAN (true)\nPrimitive (type_id=1): DATE\nPrimitive (type_id=1): DECIMAL(precision, scale) 128-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 32-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 64-bits\nPrimitive (type_id=1): DOUBLE\nPrimitive (type_id=1): FLOAT\nPrimitive (type_id=1): INT(16, SIGNED)\nPrimitive (type_id=1): INT(32, SIGNED)\nPrimitive (type_id=1): INT(64, SIGNED)\nPrimitive (type_id=1): INT(8, SIGNED)\nArray (type_id=4): N/A\nA builder for creating <code>Variant::List</code> values.\nPrimitive type: Null\nObject (type_id=3): N/A\nA builder for creating <code>Variant::Object</code> values.\nA Variant <code>ShortString</code>\nShort String (type_id=2): STRING\nPrimitive (type_id=1): STRING\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=true, …\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=false, …\nRepresents a Parquet Variant\nTop level builder for <code>Variant</code> values\nRepresents an 16-byte decimal value in the Variant format.\nRepresents a 4-byte decimal value in the Variant format.\nRepresents an 8-byte decimal value in the Variant format.\n<code>Variant</code> Array.\n<code>Variant</code> Metadata\nA <code>Variant</code> Object (struct with named fields).\nSet of duplicate fields to report for errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule for parsing JSON strings as Variant\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a JSON string to Variant using <code>VariantBuilder</code>. …\nIs there a pending nested object or list that needs to be …\nIs there a pending list or object that needs to be …\nModule for converting Variant data to JSON format\nThis function writes JSON directly to any type that …\nConvert <code>Variant</code> to JSON <code>String</code>\nConvert <code>Variant</code> to <code>serde_json::Value</code>\nA builder for creating <code>Variant::List</code> values.\nA builder for creating <code>Variant::Object</code> values.\nTop level builder for <code>Variant</code> values\nTrait that abstracts functionality from Variant …\nSet of duplicate fields to report for errors\nFinalize object\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a field with key and value to the object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new <code>ListBuilder</code> to add a list with the specified …\nCreate an <code>ListBuilder</code> for creating <code>Variant::List</code> values.\nReturn a new <code>ObjectBuilder</code> to add a nested object with the …\nCreate an <code>ObjectBuilder</code> for creating <code>Variant::Object</code> …\nIs there a pending nested object or list that needs to be …\nIs there a pending list or object that needs to be …\nUpsert field name to dictionary, return its ID\nEnables unique field key validation for objects created …\nEnables validation for unique field keys when inserting …\nEnables validation of unique field keys in nested objects.\nWrite little-endian integer to buffer\nUsed to unpack offset array entries such as metadata …\nDecodes a Binary from the value section of a variant.\nDecodes a Date from the value section of a variant.\nDecodes a Decimal16 from the value section of a variant.\nDecodes a Decimal4 from the value section of a variant.\nDecodes a Decimal8 from the value section of a variant.\nDecodes a Double from the value section of a variant.\nDecodes a Float from the value section of a variant.\nDecodes an Int16 from the value section of a variant.\nDecodes an Int32 from the value section of a variant.\nDecodes an Int64 from the value section of a variant.\nDecodes an Int8 from the value section of a variant.\nDecodes a long string from the value section of a variant.\nDecodes a short string from the value section of a variant.\nDecodes a TimestampMicros from the value section of a …\nDecodes a TimestampNtzMicros from the value section of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the basic type from a header byte\nExtract the primitive type from a Variant value-metadata …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be used in <code>map_err</code> when unpacking an integer from a …\nBuild from the <code>offset_size_minus_one</code> bits (see spec).\nReturn one unsigned little-endian value from <code>bytes</code>.\nReturn one unsigned little-endian value from <code>bytes</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a JSON string to Variant using <code>VariantBuilder</code>. …\nConvert array elements to JSON\nConvert object fields to JSON\nThis function writes JSON directly to any type that …\nConvert <code>Variant</code> to JSON <code>String</code>\nConvert <code>Variant</code> to <code>serde_json::Value</code>\nHelper for reporting integer overflow errors in a …\nHelper to safely slice bytes with offset calculations.\nHelper to get a &amp;str from a slice at the given offset and …\nPerforms a binary search over a range using a fallible key …\nAttempts to prove a fallible iterator is actually …\nPrimitive (type_id=1): BINARY\nPrimitive (type_id=1): BOOLEAN (false)\nPrimitive (type_id=1): BOOLEAN (true)\nPrimitive (type_id=1): DATE\nPrimitive (type_id=1): DECIMAL(precision, scale) 128-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 32-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 64-bits\nPrimitive (type_id=1): DOUBLE\nPrimitive (type_id=1): FLOAT\nPrimitive (type_id=1): INT(16, SIGNED)\nPrimitive (type_id=1): INT(32, SIGNED)\nPrimitive (type_id=1): INT(64, SIGNED)\nPrimitive (type_id=1): INT(8, SIGNED)\nArray (type_id=4): N/A\nPrimitive type: Null\nObject (type_id=3): N/A\nA Variant <code>ShortString</code>\nShort String (type_id=2): STRING\nPrimitive (type_id=1): STRING\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=true, …\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=false, …\nRepresents a Parquet Variant\nConverts this variant to a <code>bool</code> if possible.\nConverts this variant to a <code>DateTime&lt;Utc&gt;</code> if possible.\nConverts this variant to tuple with a 16-byte unscaled …\nConverts this variant to tuple with a 4-byte unscaled …\nConverts this variant to tuple with an 8-byte unscaled …\nConverts this variant to an <code>f32</code> if possible.\nConverts this variant to an <code>f64</code> if possible.\nConverts this variant to an <code>i16</code> if possible.\nConverts this variant to an <code>i32</code> if possible.\nConverts this variant to an <code>i64</code> if possible.\nConverts this variant to an <code>i8</code> if possible.\nConverts this variant to a <code>List</code> if it is a <code>VariantList</code>.\nConverts this variant to a <code>NaiveDate</code> if possible.\nConverts this variant to a <code>NaiveDateTime</code> if possible.\nConverts this variant to <code>()</code> if it is null.\nConverts this variant to an <code>Object</code> if it is an …\nReturns the underlying Variant short string as a &amp;str\nConverts this variant to a <code>&amp;str</code> if possible.\nConverts this variant to a <code>&amp;[u8]</code> if possible.\nTrue if this variant instance has already been validated.\nReturn the metadata associated with this variant, if any.\nAttempts to interpret a metadata and value buffer pair as …\nSimilar to <code>Self::try_new_with_metadata</code>, but unvalidated.\nAttempts to interpret <code>value</code> as a variant short string …\nAttempts to interpret a metadata and value buffer pair as …\nCreate a new variant with existing metadata.\nRecursively validates this variant value, ensuring that …\nRepresents an 16-byte decimal value in the Variant format.\nRepresents a 4-byte decimal value in the Variant format.\nRepresents an 8-byte decimal value in the Variant format.\nReturns the underlying value of the decimal.\nReturns the underlying value of the decimal.\nReturns the underlying value of the decimal.\nReturns the scale of the decimal (how many digits after …\nReturns the scale of the decimal (how many digits after …\nReturns the scale of the decimal (how many digits after …\n<code>Variant</code> Array.\nA parsed version of the variant array value header byte.\nReturns the argument unchanged.\nReturns element by index in <code>0..self.len()</code>, if any. May …\nCalls <code>U::from(self)</code>.\nIs the array of zero length\nTrue if this instance is fully validated for panic-free …\nIterates over the values of this list. When working with …\nFallible iteration over the elements of this list.\nReturn the length of this array\nFallible version of <code>get</code>. Returns element by index, …\nAttempts to interpret <code>value</code> as a variant array value.\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nPerforms a full validation of this variant array and …\n<code>Variant</code> Metadata\nHeader structure for <code>VariantMetadata</code>\nGet the dictionary size\nReturns the argument unchanged.\nAttempts to retrieve a dictionary entry by index, failing …\nGets an offset array entry by index.\nCalls <code>U::from(self)</code>.\nWhether the dictionary keys are sorted and unique\nTrue if this instance is fully validated for panic-free …\nIterates over all dictionary entries. When working with …\nReturns an iterator that attempts to visit all dictionary …\nInterprets <code>bytes</code> as a variant metadata instance, without …\nNote: This is <code>offset_size_minus_one</code> + 1\nTries to construct the variant metadata header, which has …\nAttempts to interpret <code>bytes</code> as a variant metadata …\nPerforms a full validation of this metadata dictionary and …\nThe variant protocol version\nA <code>Variant</code> Object (struct with named fields).\nHeader structure for <code>VariantObject</code>\nGet a field’s value by index in <code>0..self.len()</code>\nGet a field’s name by index in <code>0..self.len()</code>\nReturns the argument unchanged.\nReturns the value of the field with the specified name, if …\nCalls <code>U::from(self)</code>.\nReturns true if the object contains no key-value pairs\nTrue if this instance is fully validated for panic-free …\nReturns an iterator of (name, value) pairs over the fields …\nFallible iteration over the fields of this object.\nReturns the number of key-value pairs in this object\nFallible version of <code>field</code>. Returns field value by index, …\nFallible version of <code>field_name</code>. Returns field name by …\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nPerforms a full validation of this variant object.")